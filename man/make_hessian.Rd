% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper_functions.R
\name{make_hessian}
\alias{make_hessian}
\title{Numerical Hessian with respect to parameters}
\usage{
make_hessian(f)
}
\arguments{
\item{f}{A function with signature f(X, theta) that returns a numeric value.
X typically represents the data (can be a vector or a matrix),
and theta is the parameter vector for which the Hessian will be computed.}
}
\value{
A function with signature \verb{function(X, theta)} that returns a list of Hessian matrices.
Each matrix in the list corresponds to the Hessian of f with respect to theta,
evaluated at a specific data point (row of X).
}
\description{
Creates a function that computes the numerical Hessian matrices of a given function
with respect to its parameter vector. The returned function evaluates the Hessian
at specified data points and parameter values.
}
\details{
The function uses the \code{numDeriv::hessian} function to perform numerical differentiation.
For each observation (row) in X, a separate Hessian matrix is computed, and these
matrices are returned as a list. Each Hessian matrix has dimensions \verb{(length(theta), length(theta))}
and contains the second-order partial derivatives of f with respect to the parameters.

If X has only one row or is a vector, the result will be a list with a single Hessian matrix.
If X has multiple rows, the result will be a list of Hessian matrices, one for each row of X.

Note that this implementation treats each row of X as a separate data point. The function
transposes each row to ensure consistent behavior regardless of whether X is passed as
a single vector or as rows in a matrix.
}
\examples{
# Example 1: Simple exponential model
f <- function(X, theta) drop(exp(X \%*\% theta))

# Create a Hessian function
hessian_fn <- make_hessian(f)

# Compute the Hessian for a subset of iris data
X <- as.matrix(iris[1:3, 1:4])  # Using only 3 observations for clarity
theta <- c(0.1, 0.3, -0.2, 0.2)
H_list <- hessian_fn(X, theta)

# Examine the result
length(H_list)  # Should be 3 (one Hessian per row of X)
dim(H_list[[1]])  # Should be (4, 4) (4 parameters)
}
