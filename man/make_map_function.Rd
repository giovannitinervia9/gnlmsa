% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper_functions.R
\name{make_map_function}
\alias{make_map_function}
\title{Create mapping functions between constrained parameter spaces and the real line}
\usage{
make_map_function(lower, upper)
}
\arguments{
\item{lower}{a numerical vector containing the lower bounds for each parameter.
Use \code{-Inf} for unbounded below parameters.}

\item{upper}{a numerical vector containing the upper bounds for each parameter.
Use \code{Inf} for unbounded above parameters.}
}
\value{
A list containing three functions:
\describe{
\item{\code{map(par)}}{A function that maps parameters from the constrained space to the real line.}
\item{\code{invert(par)}}{A function that maps parameters from the real line back to the constrained space.}
\item{\code{jacobian(par)}}{A function that returns the derivative of the transformation for each parameter.}
}
All three functions expect a numeric vector \code{par} of the same length as \code{lower} and \code{upper}.
}
\description{
This function generates a set of transformation functions that map parameters from various constrained spaces
to the real line and vice versa. It automatically identifies the appropriate transformation for each parameter
based on the provided bounds.
}
\details{
The function automatically selects the appropriate transformation for each parameter based on its bounds:
\enumerate{
\item For parameters with finite bounds \verb{(lower[i], upper[i])}, \code{\link[=map_interval]{map_interval()}} is used.
\item For parameters bounded only below \verb{(lower[i], Inf)}, \code{\link[=map_positive]{map_positive()}} is used.
\item For parameters bounded only above \verb{(-Inf, upper[i])}, \code{\link[=map_negative]{map_negative()}} is used.
\item For completely unbounded parameters \verb{(-Inf, Inf)}, the \code{identity} function is used.
}

The \code{map()} function transforms the constrained parameters to unconstrained values on the real line.
The \code{invert()} function performs the inverse transformation from the real line back to the constrained space.
The \code{jacobian()} function returns the derivatives of the transformation for each parameter.
}
\examples{
# Create mapping functions for parameters with different constraints
lower <- c(-Inf, 0, -1)
upper <- c(Inf, Inf, 1)

# Interpretation:
# - First parameter: unbounded (-Inf, Inf)
# - Second parameter: bounded below (0, Inf)
# - Third parameter: bounded on both sides (-1, 1)

map_functions <- make_map_function(lower, upper)

# Extract the mapping functions
map <- map_functions$map
invert <- map_functions$invert
jacobian <- map_functions$jacobian

# Define parameter values in the constrained space
x <- c(0, 3, 0.2)

# Map to unconstrained space
y <- map(x)
y

# Map back to constrained space
x_recovered <- invert(y)
x_recovered

# Verify roundtrip accuracy
x - x_recovered
all.equal(x, x_recovered)

# Calculate the Jacobian at point x
j <- jacobian(x)
j
}
