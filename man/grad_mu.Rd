% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loglik_derivatives.R
\name{grad_mu}
\alias{grad_mu}
\title{Gradient with Respect to Mean Component Parameters in Generalized Non-Linear Models}
\usage{
grad_mu(y, X, beta, mu, eta, phi, f_mu, J_mu, mu.eta, variance)
}
\arguments{
\item{y}{Numeric vector of observed responses.}

\item{X}{Numeric matrix of covariates for the mean component.}

\item{beta}{Numeric vector of current values for the parameters of the mean component.}

\item{mu}{Numeric vector of conditional means, typically obtained via the inverse link function applied to \code{eta}.}

\item{eta}{Numeric vector of nonlinear predictors \eqn{\eta = \eta(X, \beta)}.}

\item{phi}{Numeric vector of conditional dispersion values.}

\item{f_mu}{A user-defined function of signature \code{f(X, theta)} returning the nonlinear predictor.}

\item{J_mu}{Optional. A function to compute the Jacobian of \code{f_mu}, with signature \code{J_mu(X, theta)}.
Returns a \eqn{n \times k} matrix, where \code{n = length(y)} and \code{k = length(beta)}.}

\item{mu.eta}{Function computing the derivative \eqn{\partial \mu / \partial \eta}, as returned by \code{\link[=make_link]{make_link()}}.}

\item{variance}{Function defining the variance of the distribution as a function of \code{mu} and \code{phi}.}
}
\value{
A numeric vector of length equal to the number of parameters in the mean component.
}
\description{
Computes the gradient of the log-likelihood with respect to the parameters of the mean component
in a Generalized Non-Linear Model (GNLM), assuming the response variable belongs to an exponential family.
}
\details{
This function evaluates the score vector (first derivative of the log-likelihood) with respect to
the mean parameters \eqn{\beta}. It is valid for any GNLM family provided that the appropriate
variance and derivative functions are specified.
}
\examples{
# create family object
fam_gamma <- gnlmsa_Gamma(link_mu = "identity", link_phi = "log")

# create non linear function for mean
cd <- cobb_douglas()
f_mu <- cd$f
J_mu <- cd$J

# create non linear function for dispersion
lin <- Linear()
f_phi <- lin$f
J_phi <- lin$J

# sample size
n <- 100

# covariates for the mean component
X <- cbind(rgamma(n, 1000, 10), rgamma(n, 2000, 5))

# covariates for the variance component
Z <- cbind(1, X)

# parameters for mean component
beta <- c(1, .5, .3)
eta <- f_mu(X, beta)
mu <- fam_gamma$linkinv_mu(eta)

# parameters for dispersion component
gamma <- c(1, .2, -.05)
vi <- f_phi(Z, gamma)
phi <- fam_gamma$linkinv_phi(vi)

# simulate response
y <- rgamma(n, phi, phi/mu)

grad_mu(y, X, beta, mu, eta, phi,
        f_mu, J_mu,
        fam_gamma$mu.eta, fam_gamma$variance)
}
