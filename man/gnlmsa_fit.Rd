% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gnlmsa_fit.R
\name{gnlmsa_fit}
\alias{gnlmsa_fit}
\title{Fit Generalized Non-Linear Models via Newton–Raphson Optimization}
\usage{
gnlmsa_fit(
  y,
  X,
  Z,
  family,
  f_mu,
  J_mu,
  H_mu,
  f_phi,
  J_phi,
  H_phi,
  beta_start,
  gamma_start,
  fixed_params = NULL,
  maxit = 100,
  tol = 1e-05,
  expected = TRUE
)
}
\arguments{
\item{y}{Numeric vector of response values.}

\item{X}{Design matrix for the mean component.}

\item{Z}{Design matrix for the dispersion component.}

\item{family}{A \code{\link{family_gnlmsa}} object defining the distribution, link functions, and associated derivatives.}

\item{f_mu}{Function computing the nonlinear predictor for the mean component.}

\item{J_mu}{Optional. Jacobian of \code{f_mu}.}

\item{H_mu}{Optional. Hessian of \code{f_mu}.}

\item{f_phi}{Function computing the nonlinear predictor for the dispersion component.}

\item{J_phi}{Optional. Jacobian of \code{f_phi}.}

\item{H_phi}{Optional. Hessian of \code{f_phi}.}

\item{beta_start}{Initial values for the parameters of the mean component.}

\item{gamma_start}{Initial values for the parameters of the dispersion component.}

\item{fixed_params}{A list containing two numeric vectors of the same length:
\itemize{
\item The first vector specifies the indices of the parameters to be fixed.
\item The second vector provides the corresponding fixed values for those parameters.
}}

\item{maxit}{Integer. Maximum number of iterations (default: 100).}

\item{tol}{Numeric. Convergence tolerance on parameter updates (default: 1e-5).}

\item{expected}{Logical; if \code{TRUE} (default), the expected (Fisher) information is used for the Hessian.
If \code{FALSE}, the observed Hessian is used.}
}
\value{
A list of class \code{"gnlmsa_fit"} with the following components:
\describe{
\item{beta}{Estimated coefficients for the mean component.}
\item{gamma}{Estimated coefficients for the dispersion component.}
\item{loglik}{Final value of the log-likelihood.}
\item{eta}{Predictor for the mean component, \eqn{\hat{\eta}}.}
\item{mu}{Fitted values for the mean, \eqn{\hat{\mu} = g^{-1}(\hat{\eta})}.}
\item{vi}{Predictor for the dispersion component, \eqn{\hat{v}}.}
\item{phi}{Fitted dispersion values, \eqn{\hat{\phi} = h^{-1}(\hat{v})}.}
\item{it}{Number of iterations performed.}
\item{maxit}{Maximum number of iterations allowed.}
\item{tol}{Convergence tolerance used.}
}
}
\description{
Estimates the parameters of a Generalized Non-Linear Model (GNLM) using a full Newton–Raphson optimization routine.
The algorithm jointly estimates both the mean and dispersion components by iteratively updating the parameter vector
based on the gradient (score) and the Hessian of the log-likelihood.
}
\details{
Arbitrary non-linear predictors may be supplied for both the mean and dispersion components, with optional
user-provided Jacobians and Hessians to improve convergence.
}
\section{Details}{

Iterations continue until the absolute change in all parameters is less than \code{tol},
or until \code{maxit} iterations have been performed.
If the log-likelihood decreases between iterations, a warning is issued, but the algorithm continues from the current point.
All distribution-specific functions (link, variance, score, Hessians, log-likelihood) must be supplied via a \code{\link{family_gnlmsa}} object.
}

\examples{
\dontrun{
y <- productivity$Y
X <- as.matrix(productivity[, -1])
Z <- cbind(1, prcomp(scale(X))$x[, 1])

sa <- sa_fit(y = y, X = X, Z = Z, family = gnlmsa_Gamma("identity"),
             f_mu = cobb_douglas()$f, J_mu = cobb_douglas()$J,
             H_mu = cobb_douglas()$H,
             f_phi = Linear()$f, J_phi = Linear()$J, H_phi = Linear()$H,
             beta_start = rep(1, 3), lower_mu = rep(0, 3), upper_mu = rep(Inf, 3),
             gamma_start = c(10, 0), lower_phi = rep(-Inf, 2), upper_phi = rep(Inf, 2),
             mult = 1, nsim = 1, sa_control = sa_control(10000), expected = TRUE,
             verbose = TRUE)

gnlmsa_fit(y = y, X = X, Z = Z, family = gnlmsa_Gamma("identity"),
           f_mu = cobb_douglas()$f, J_mu = cobb_douglas()$J,
           H_mu = cobb_douglas()$H,
           f_phi = Linear()$f, J_phi = Linear()$J, H_phi = Linear()$H,
           beta_start = sa$beta, gamma_start = sa$gamma,
           maxit = 100, tol = 1e-05, expected = TRUE)
}
}
